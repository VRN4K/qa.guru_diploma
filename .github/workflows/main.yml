name: QA.GURU diploma test
on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
permissions:
  contents: write  # –ù—É–∂–Ω–æ –¥–ª—è –¥–µ–ø–ª–æ—è –≤ gh-pages
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npx playwright test

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç pw
      - uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: test-results
          path: test-results
          retention-days: 20

      # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç allure
      - uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: allure-results
          path: allure-results
          retention-days: 20

      # –∑–∞–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—á–µ—Ç–∞ allure
      - uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Generate Allure Report
        if: always()
        uses: simple-elf/allure-report-action@master
        id: allure-report
        with:
          allure_results: allure-results
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 20

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ allure-results –æ—Ç—á–µ—Ç allure-report
      - name: Deploy report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-history
          publish_branch: gh-pages

      - name: Parse Allure summary
        id: parse_summary
        if: always()
        run: |
          SUMMARY_FILE="allure-report/widgets/summary.json"
          if [ -f "$SUMMARY_FILE" ]; then
            PASSED=$(jq '.statistic.passed' $SUMMARY_FILE)
            FAILED=$(jq '.statistic.failed' $SUMMARY_FILE)
            SKIPPED=$(jq '.statistic.skipped' $SUMMARY_FILE)
            TOTAL=$(jq '.statistic.total' $SUMMARY_FILE)
            echo "PASSED=$PASSED" >> $GITHUB_ENV
            echo "FAILED=$FAILED" >> $GITHUB_ENV
            echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
            echo "TOTAL=$TOTAL" >> $GITHUB_ENV
          fi
      
      - name: Notify Telegram
        if: always()
        run: |
          STATUS=${{ job.status }}
          MESSAGE="üß™ *Playwright Tests –∑–∞–≤–µ—Ä—à–µ–Ω—ã*%0A\
          –°—Ç–∞—Ç—É—Å: *$STATUS*%0A\
          ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: *$PASSED*%0A\
          ‚ùå –£–ø–∞–ª–æ: *$FAILED*%0A\
          ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: *$SKIPPED*%0A\
          üìä –í—Å–µ–≥–æ: *$TOTAL*%0A\
            üîó [–û—Ç–∫—Ä—ã—Ç—å Allure Report](https://vrn4k.github.io/qa.guru_diploma/)"
            curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d parse_mode=Markdown \
            -d text="$MESSAGE"
      
      - name: Install allurectl
        run: |
          curl -o allurectl -L "https://github.com/allure-framework/allurectl/releases/latest/download/allurectl_linux_amd64"
          chmod +x allurectl
          sudo mv allurectl /usr/local/bin/

      - name: Upload results to Allure TestOps
        if: always()
        run: |
          allurectl upload allure-results \
            --endpoint https://allure.autotests.cloud \
            --project-id 4717 \
            --token ${{ secrets.ALLURE_TOKEN }} \
            --launch-name "GitHub Run #${{ github.run_number }}"
